; 本项目实现跑马灯的效果，通过按键可以改变跑马灯的方向
BIT0       	EQU 0x00000001
BIT1       	EQU 0x00000002
BIT6       	EQU 0x00000040
BIT7		EQU 0x00000080
CFGA      	EQU 0x03333338  ;PA.1-6: 推挽输出，50MHz；PA.0：上拉输入
	
GPIOA      	EQU 0x40010800  ;GPIOA 地址
GPIOA_CRL  	EQU GPIOA+0x00  ;低配置寄存器
GPIOA_CRH  	EQU GPIOA+0x04  ;高配置寄存器
GPIOA_ODR  	EQU GPIOA+0x0C  ;输出，偏移地址 0Ch
GPIOA_IDR  	EQU GPIOA+0x08  ;输入，偏移地址 08h
GPIOA_BSRR 	EQU GPIOA+0x10  ;低置位，高清除偏移地址 10h
GPIOA_BRR  	EQU GPIOA+0x14  ;清除寄存器偏移地址 14h

CCMRCFG	  	EQU 0x0002
CCERCFG	  	EQU 0x0002
SMCRCFG		EQU 0x0057
CR1CFG		EQU 0x0001

TIM2		EQU 0x40000000
TIM2_CR1	EQU TIM2+0x00
TIM2_SMCR	EQU TIM2+0x08
TIM2_CCMR1	EQU TIM2+0x18
TIM2_CCER	EQU TIM2+0x20
TIM2_CNT	EQU TIM2+0x24


GIOPAEN    	EQU 0x00000004  ;GPIOA 时钟使能
RCC_APB2ENR EQU 0x40021018
TIM2EN		EQU 0x00000001	;TIM2 计时器使能
RCC_APB1ENR EQU 0x4002101C

STACK_TOP   EQU 0x20002000
 AREA RESET,CODE,READONLY
 DCD STACK_TOP 				; MSP 主堆栈指针
 DCD START   				; 复位 PC 初始值
 ENTRY         				; 指示开始执行
START                      	
 LDR    R1, =RCC_APB2ENR    ; 0x40021018
 LDR    R0, [R1]
 LDR    R2, =GIOPAEN         
 ORR    R0, R2
 STR    R0, [R1]           	; 使能 GPIOA 时钟
 LDR	R1, =RCC_APB1ENR	; 0x4002101C
 LDR	R0, [R1]
 LDR	R2, =TIM2EN
 ORR	R0, R2
 STR	R0, [R1]			; 使能 TIM2 计时器
 
; PA.1-6: 推挽输出，50MHz；PA.0：上拉输入，50MHz
 LDR    R0, =CFGA
 LDR    R1, =GPIOA_CRL
 STR    R0, [R1]
 MOV 	R0, #BIT0
 ORR	R0, #BIT6
 LDR	R1, =GPIOA_ODR
 STR	R0, [R1]
 
; 设置时钟参数
 MOV	R0, #CCMRCFG
 LDR	R1, =TIM2_CCMR1
 STR	R0, [R1]
 MOV	R0, #CCERCFG
 LDR	R1, =TIM2_CCER
 STR	R0, [R1]
 MOV	R0, #SMCRCFG
 LDR	R1, =TIM2_SMCR
 STR	R0, [R1]
 MOV	R0, #CR1CFG
 LDR	R1, =TIM2_CR1
 STR	R0, [R1]

LOOP5
 LDR	R1, =TIM2_CNT
 LDR	R0, [R1]
 TST	R0, #1
 BNE 	SHIFT_RIGHT
SHIFT_LEFT
 LDR	R1, =GPIOA_ODR
 LDR	R0, [R1]
 EOR	R0, #BIT0
 TST	R0, #BIT6
 IT 	NE
 MOVNE	R0, #BIT0
 LSL	R0, #1
 B		END_SHIFT
SHIFT_RIGHT
 LDR	R1, =GPIOA_ODR
 LDR	R0, [R1]
 EOR	R0, #BIT0
 TST	R0, #BIT1
 IT 	NE
 MOVNE	R0, #BIT7
 LSR	R0, #1
END_SHIFT
 ORR	R0, #BIT0
 STR	R0, [R1]
 BL		Delay
 B LOOP5
END
	
Delay
 PUSH {R0,R1,R2,LR}
               
 MOVS R0,#0
 MOVS R1,#0
 MOVS R2,#0
                
DelayLoop0        
  ADDS R0,R0,#1

  CMP R0,#330
  BCC DelayLoop0
                
  MOVS R0,#0
  ADDS R1,R1,#1
  CMP R1,#330
  BCC DelayLoop0

  MOVS R0,#0
  MOVS R1,#0
  ADDS R2,R2,#1
  CMP R2,#15
  BCC DelayLoop0                
  POP {R0,R1,R2,PC}   
 END
